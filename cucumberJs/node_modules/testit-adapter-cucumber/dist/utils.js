"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsedAutotests = exports.calculateResultOutcome = exports.parseTags = exports.getLabel = exports.getDescription = exports.getName = exports.getWorkItemId = exports.getTitle = exports.getLink = exports.getLinkUrl = exports.getExternalId = exports.getTagType = void 0;
const tags_1 = require("./types/tags");
function getTagType(tag) {
    if (new RegExp(`^@${tags_1.tags.externalId}=.+$`).test(tag)) {
        return tags_1.TagType.ExternalId;
    }
    if (new RegExp(`^@${tags_1.tags.links}=.+$`).test(tag)) {
        // Check if it is JSON
        if (tag.endsWith('}')) {
            return tags_1.TagType.Link;
        }
        return tags_1.TagType.LinkUrl;
    }
    if (new RegExp(`^@${tags_1.tags.title}=.+$`).test(tag)) {
        return tags_1.TagType.Title;
    }
    if (new RegExp(`^@${tags_1.tags.workItemId}=.+$`).test(tag)) {
        return tags_1.TagType.WorkItemId;
    }
    if (new RegExp(`^@${tags_1.tags.name}=.+$`).test(tag)) {
        return tags_1.TagType.Name;
    }
    if (new RegExp(`^@${tags_1.tags.description}=.+$`).test(tag)) {
        return tags_1.TagType.Description;
    }
    if (new RegExp(`^@${tags_1.tags.labels}=.+$`).test(tag)) {
        return tags_1.TagType.Label;
    }
    return tags_1.TagType.Unknown;
}
exports.getTagType = getTagType;
function getExternalId(tag) {
    return tag.replace(new RegExp(`^@${tags_1.tags.externalId}=`), '');
}
exports.getExternalId = getExternalId;
function getLinkUrl(tag) {
    return tag.replace(new RegExp(`^@${tags_1.tags.links}=`), '');
}
exports.getLinkUrl = getLinkUrl;
function getLink(tag) {
    const linkData = JSON.parse(getLinkUrl(tag));
    return linkData;
}
exports.getLink = getLink;
function getTitle(tag) {
    return tag.replace(new RegExp(`^@${tags_1.tags.title}=`), '');
}
exports.getTitle = getTitle;
function getWorkItemId(tag) {
    return tag.replace(new RegExp(`^@${tags_1.tags.workItemId}=`), '');
}
exports.getWorkItemId = getWorkItemId;
function getName(tag) {
    return tag.replace(new RegExp(`^@${tags_1.tags.name}=`), '');
}
exports.getName = getName;
function getDescription(tag) {
    return tag.replace(new RegExp(`^@${tags_1.tags.description}=`), '');
}
exports.getDescription = getDescription;
function getLabel(tag) {
    return tag.replace(new RegExp(`^@${tags_1.tags.labels}=`), '');
}
exports.getLabel = getLabel;
function parseTags(tags) {
    var _a, _b, _c;
    const parsedTags = { links: [], labels: [] };
    for (const tag of tags) {
        switch (getTagType(tag.name)) {
            case tags_1.TagType.ExternalId:
                parsedTags.externalId = getExternalId(tag.name);
                continue;
            case tags_1.TagType.LinkUrl: {
                (_a = parsedTags.links) === null || _a === void 0 ? void 0 : _a.push({ url: getLinkUrl(tag.name) });
                continue;
            }
            case tags_1.TagType.Link: {
                (_b = parsedTags.links) === null || _b === void 0 ? void 0 : _b.push(getLink(tag.name));
                continue;
            }
            case tags_1.TagType.Title: {
                parsedTags.title = getTitle(tag.name);
                continue;
            }
            case tags_1.TagType.WorkItemId: {
                parsedTags.workItemId = getWorkItemId(tag.name);
                continue;
            }
            case tags_1.TagType.Name: {
                parsedTags.name = getName(tag.name);
                continue;
            }
            case tags_1.TagType.Description: {
                parsedTags.description = getDescription(tag.name);
                continue;
            }
            case tags_1.TagType.Label: {
                (_c = parsedTags.labels) === null || _c === void 0 ? void 0 : _c.push(getLabel(tag.name));
                continue;
            }
            case tags_1.TagType.Unknown:
                continue;
            default:
                throw new Error('Unknown tag type');
        }
    }
    return parsedTags;
}
exports.parseTags = parseTags;
function calculateResultOutcome(outcomes) {
    if (outcomes.some((outcome) => outcome === 'Failed')) {
        return 'Failed';
    }
    if (outcomes.some((outcome) => outcome === 'Blocked')) {
        return 'Blocked';
    }
    if (outcomes.some((outcome) => outcome === 'Skipped')) {
        return 'Skipped';
    }
    if (outcomes.every((outcome) => outcome === 'Passed')) {
        return 'Passed';
    }
    throw new Error('Cannot calculate result outcome');
}
exports.calculateResultOutcome = calculateResultOutcome;
function parsedAutotests(autotests, configurationId) {
    var resolvedAutotests = [];
    for (const autotest of autotests) {
        if (configurationId === autotest.configurationId) {
            resolvedAutotests.push(autotest.autoTest.externalId);
        }
    }
    return resolvedAutotests;
}
exports.parsedAutotests = parsedAutotests;
//# sourceMappingURL=utils.js.map