"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapDataTable = exports.mapStep = exports.mapExamples = exports.mapScenario = exports.mapRule = exports.mapBackground = exports.mapDocument = exports.mapDate = exports.mapStatus = void 0;
const messages_1 = require("@cucumber/messages");
const utils_1 = require("./utils");
function mapStatus(status) {
    switch (status) {
        case messages_1.TestStepResultStatus.PASSED:
            return 'Passed';
        case messages_1.TestStepResultStatus.FAILED:
            return 'Failed';
        case messages_1.TestStepResultStatus.PENDING:
            return 'Pending';
        case messages_1.TestStepResultStatus.SKIPPED:
            return 'Skipped';
        case messages_1.TestStepResultStatus.UNKNOWN:
        case messages_1.TestStepResultStatus.UNDEFINED:
        case messages_1.TestStepResultStatus.AMBIGUOUS:
            return 'Blocked';
        default:
            throw new Error('Unknown status');
    }
}
exports.mapStatus = mapStatus;
function mapDate(date) {
    return new Date(date * 1000).toISOString();
}
exports.mapDate = mapDate;
function mapDocument(document, projectId) {
    if (document.feature === undefined) {
        return [];
    }
    const setup = document.feature.children
        .filter((child) => child.background !== undefined)
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        .map((child) => mapBackground(child.background));
    const scenarioAutotests = document.feature.children
        .filter((child) => child.scenario !== undefined)
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        .map((child) => mapScenario(child.scenario, projectId, setup));
    const ruleAutotests = document.feature.children
        .filter((child) => child.rule !== undefined)
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        .flatMap((child) => mapRule(child.rule, projectId, setup));
    return scenarioAutotests.concat(...ruleAutotests);
}
exports.mapDocument = mapDocument;
function mapBackground(background) {
    return {
        title: background.name,
        description: background.description,
        steps: background.steps.map(mapStep),
    };
}
exports.mapBackground = mapBackground;
function mapRule(rule, projectId, setup) {
    const ruleSetup = setup.concat(rule.children
        .filter((child) => child.background !== undefined)
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        .map((child) => mapBackground(child.background)));
    return (rule.children
        .filter((child) => child.scenario !== undefined)
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        .map((child) => mapScenario(child.scenario, projectId, ruleSetup)));
}
exports.mapRule = mapRule;
function mapScenario(scenario, projectId, setup) {
    var _a, _b;
    const tags = (0, utils_1.parseTags)(scenario.tags);
    if (tags.externalId === undefined) {
        return {
            externalId: '',
            name: scenario.name,
            projectId
        };
    }
    const exampleSteps = scenario.examples.map(mapExamples);
    return {
        setup: exampleSteps.concat(setup),
        externalId: tags.externalId,
        links: tags.links,
        name: (_a = tags.name) !== null && _a !== void 0 ? _a : scenario.name,
        title: tags.title,
        description: (_b = tags.description) !== null && _b !== void 0 ? _b : scenario.description,
        projectId,
        steps: scenario.steps.map(mapStep),
        workItemId: tags.workItemId,
        // Disable for now (BUG??)
        // labels:
        //   tags.labels.length > 0
        //     ? tags.labels.map((label) => ({ name: label }))
        //     : undefined,
    };
}
exports.mapScenario = mapScenario;
//TODO: Implement using "parameters" fields
function mapExamples(examples) {
    var _a, _b, _c, _d;
    let table = [];
    const body = examples.tableBody.map((row) => row.cells.map((cell) => cell.value));
    if (examples.tableHeader !== undefined) {
        const header = (_a = examples.tableHeader) === null || _a === void 0 ? void 0 : _a.cells.map((cell) => cell.value);
        table = body.map((row) => header.reduce((acc, key, i) => {
            acc[key] = row[i];
            return acc;
        }, {}));
    }
    else {
        table = body;
    }
    const description = [examples.description];
    const tags = (0, utils_1.parseTags)(examples.tags);
    if (table.length > 0) {
        description.push(JSON.stringify(table));
    }
    return {
        title: (_c = (_b = tags.title) !== null && _b !== void 0 ? _b : tags.name) !== null && _c !== void 0 ? _c : (examples.name !== '' ? examples.name : 'Parameters'),
        description: (_d = tags.description) !== null && _d !== void 0 ? _d : description.join('\n\n'),
    };
}
exports.mapExamples = mapExamples;
function mapStep(step) {
    var _a, _b;
    return {
        title: `${step.keyword} ${step.text}`,
        description: (_b = (_a = step.docString) === null || _a === void 0 ? void 0 : _a.content) !== null && _b !== void 0 ? _b : mapDataTable(step.dataTable),
    };
}
exports.mapStep = mapStep;
function mapDataTable(dataTable) {
    if (dataTable === undefined) {
        return undefined;
    }
    const keys = dataTable.rows[0].cells.map((cell) => cell.value);
    const rows = dataTable.rows
        .slice(1)
        .map((row) => row.cells.map((cell) => cell.value));
    const objects = rows.map((value) => keys.reduce((acc, key, i) => {
        acc[key] = value[i];
        return acc;
    }, {}));
    return JSON.stringify(objects);
}
exports.mapDataTable = mapDataTable;
//# sourceMappingURL=mappers.js.map