"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Storage = void 0;
const mappers_1 = require("./mappers");
const utils_1 = require("./utils");
class Storage {
    constructor() {
        this.gherkinDocuments = [];
        this.pickles = [];
        this.testCases = [];
        this.testCasesStarted = [];
        this.testCasesFinished = [];
        this.testStepsStarted = [];
        this.testStepsFinished = [];
        this.messages = {};
        this.links = {};
        this.attachments = {};
    }
    saveGherkinDocument(document) {
        this.gherkinDocuments.push(document);
    }
    getAutotests(projectId) {
        return this.gherkinDocuments.flatMap((document) => (0, mappers_1.mapDocument)(document, projectId));
    }
    savePickle(pickle) {
        this.pickles.push(pickle);
    }
    isResolvedTestCase(testCase) {
        for (const pickle of this.pickles) {
            const tags = (0, utils_1.parseTags)(pickle.tags);
            if (tags.externalId !== undefined && testCase.pickleId === pickle.id) {
                return true;
            }
        }
        return false;
    }
    saveTestCase(testCase) {
        this.testCases.push(testCase);
    }
    saveTestCaseStarted(testCaseStarted) {
        this.testCasesStarted.push(testCaseStarted);
    }
    saveTestCaseFinished(testCaseFinished) {
        this.testCasesFinished.push(testCaseFinished);
    }
    saveTestStepStarted(testStepStarted) {
        this.testStepsStarted.push(testStepStarted);
    }
    saveTestStepFinished(testStepFinished) {
        this.testStepsFinished.push(testStepFinished);
    }
    getTestRunResults(configurationId) {
        var _a, _b, _c;
        const results = [];
        for (const pickle of this.pickles) {
            const testCase = this.testCases.find((testCase) => testCase.pickleId === pickle.id);
            const tags = (0, utils_1.parseTags)(pickle.tags);
            if (testCase !== undefined && tags.externalId !== undefined) {
                const testCaseStarted = this.testCasesStarted.find((testCase) => testCase.id === testCase.id);
                if (testCaseStarted === undefined) {
                    throw new Error('TestCaseStarted not found');
                }
                const testCaseFinished = this.testCasesFinished.find((testCase) => testCase.testCaseStartedId === testCaseStarted.id);
                if (testCaseFinished === undefined) {
                    throw new Error('TestCaseFinished not found');
                }
                const steps = pickle.steps
                    .map((step) => this.getStepResult(step, testCase))
                    .filter((item, i, arr) => {
                    var _a;
                    const prevOutcome = (_a = arr[i - 1]) === null || _a === void 0 ? void 0 : _a.outcome;
                    if (item.outcome === 'Skipped' &&
                        prevOutcome !== undefined &&
                        ['Failed', 'Skipped'].includes(prevOutcome)) {
                        return false;
                    }
                    return true;
                });
                const messages = [];
                for (const step of pickle.steps) {
                    const message = this.getStepMessage(step, testCase);
                    if (message !== undefined) {
                        messages.push(message);
                    }
                }
                const links = (_a = this.links[testCase.id]) !== null && _a !== void 0 ? _a : [];
                links.push(...tags.links);
                const result = {
                    autotestExternalId: tags.externalId,
                    configurationId,
                    links,
                    stepResults: steps,
                    outcome: (0, utils_1.calculateResultOutcome)(steps.map((step) => step.outcome)),
                    startedOn: (0, mappers_1.mapDate)(testCaseStarted.timestamp.seconds),
                    completeOn: (0, mappers_1.mapDate)(testCaseFinished.timestamp.seconds),
                    duration: testCaseFinished.timestamp.seconds -
                        testCaseStarted.timestamp.seconds,
                    message: (_c = (_b = this.messages[testCase.id]) === null || _b === void 0 ? void 0 : _b.join('\n\n')) !== null && _c !== void 0 ? _c : undefined,
                    traces: messages.join('\n\n'),
                    attachments: this.getAttachments(testCase.id),
                };
                results.push(result);
            }
        }
        return results;
    }
    getStepResult(pickleStep, testCase) {
        const testStep = testCase.testSteps.find((step) => step.pickleStepId === pickleStep.id);
        if (testStep === undefined) {
            throw new Error('TestCase step not found');
        }
        const testStepStarted = this.testStepsStarted.find((step) => step.testStepId === testStep.id);
        if (testStepStarted === undefined) {
            throw new Error('TestStepStarted not found');
        }
        const testStepFinished = this.testStepsFinished.find((step) => step.testStepId === testStepStarted.testStepId);
        if (testStepFinished === undefined) {
            throw new Error('TestStepFinished not found');
        }
        return {
            title: pickleStep.text,
            startedOn: (0, mappers_1.mapDate)(testStepStarted.timestamp.seconds),
            duration: testStepFinished.testStepResult.duration.seconds,
            completedOn: (0, mappers_1.mapDate)(testStepFinished.timestamp.seconds),
            outcome: (0, mappers_1.mapStatus)(testStepFinished.testStepResult.status),
        };
    }
    getStepMessage(pickleStep, testCase) {
        const testStep = testCase.testSteps.find((step) => step.pickleStepId === pickleStep.id);
        if (testStep === undefined) {
            throw new Error('TestCase step not found');
        }
        const testStepStarted = this.testStepsStarted.find((step) => step.testStepId === testStep.id);
        if (testStepStarted === undefined) {
            throw new Error('TestStepStarted not found');
        }
        const testStepFinished = this.testStepsFinished.find((step) => step.testStepId === testStepStarted.testStepId);
        if (testStepFinished === undefined) {
            throw new Error('TestStepFinished not found');
        }
        return testStepFinished.testStepResult.message;
    }
    getAttachments(testCaseId) {
        if (this.attachments[testCaseId] === undefined) {
            return undefined;
        }
        return this.attachments[testCaseId].map((id) => ({ id }));
    }
    addMessage(testCaseId, message) {
        if (this.messages[testCaseId] === undefined) {
            this.messages[testCaseId] = [message];
        }
        else {
            this.messages[testCaseId].push(message);
        }
    }
    addLinks(testCaseId, links) {
        if (this.links[testCaseId] === undefined) {
            this.links[testCaseId] = links;
        }
        else {
            this.links[testCaseId].push(...links);
        }
    }
    addAttachment(testCaseId, attachmentId) {
        if (this.attachments[testCaseId] === undefined) {
            this.attachments[testCaseId] = [attachmentId];
        }
        else {
            this.attachments[testCaseId].concat(attachmentId);
        }
    }
}
exports.Storage = Storage;
//# sourceMappingURL=storage.js.map