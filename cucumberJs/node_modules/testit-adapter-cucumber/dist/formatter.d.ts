import { Formatter, IFormatterOptions } from '@cucumber/cucumber';
import { GherkinDocument, Pickle, TestCase, TestStepFinished, TestRunFinished, TestCaseStarted, TestCaseFinished, TestStepStarted, Meta, TestRunStarted } from '@cucumber/messages';
import { ClientConfigWithFile, IClient, LinkPost } from 'testit-api-client';
import { IStorage } from './types/storage';
import { IFormatter } from './types/formatter';
import { AutotestPostWithWorkItemId } from './mappers';
export declare class TestItFormatter extends Formatter implements IFormatter {
    client: IClient;
    storage: IStorage;
    currentTestCaseId: string | undefined;
    resolvedAutotests: Array<string | undefined> | undefined;
    constructor(options: IFormatterOptions, config: Partial<ClientConfigWithFile>);
    private testRunId;
    private testRunStarted;
    private attachmentsQueue;
    onMeta(_meta: Meta): void;
    onGherkinDocument(document: GherkinDocument): void;
    onPickle(pickle: Pickle): void;
    onTestRunStarted(_testRunStarted: TestRunStarted): void;
    onTestCase(testCase: TestCase): void;
    onTestCaseStarted(testCaseStarted: TestCaseStarted): void;
    testStepStarted(testStepStarted: TestStepStarted): void;
    onTestStepFinished(testStepFinished: TestStepFinished): void;
    testCaseFinished(testCaseFinished: TestCaseFinished): void;
    onTestRunFinished(_testRunFinished: TestRunFinished): void;
    loadAutotest(autotestPost: AutotestPostWithWorkItemId): Promise<void>;
    loadPassedAutotest(autotestPost: AutotestPostWithWorkItemId): Promise<void>;
    createTestRun(): void;
    createNewAutotest(autotestPost: AutotestPostWithWorkItemId): Promise<void>;
    updateAutotest(autotestPost: AutotestPostWithWorkItemId): Promise<void>;
    linkWorkItem(externalId: string, workItemId: string): Promise<void>;
    addMessage(message: string): void;
    addLinks(links: LinkPost[]): void;
    addAttachments(attachments: string[]): void;
    private logError;
}
